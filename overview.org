
* Introduction + Outline
** Context
*** Business
**** Hedge funds. Manage money on behalf of clients
**** Group - within a fund managing portion of funds allocated money.
**** Heavility Regulated
**** Large trading volume

*** Software requirements

**** Profitable
**** Resilient
**** Performant
**** Auditable
**** Modifiable

**** Productivity vs performance

***** Introduce the graph

****** X productivity Y performance

****** The four quadrants
******* Stars
******* Quick starters that perform badly
******* Performers that take too long
******* Idiots


***** Productivity model

****** Productivity = -cost + min( time - startupTime ) * productivity
****** Startuptime inversely proportional to productivity


* Rationale for new architecture
** Event Sourcing

*** Reperesent *everything* as stream of events that are both 
**** Ordered
**** Persisted
**** Performant (Optional)

*** Examples of events
***** Market data
***** Orders to market
***** Executions from market
***** User actions
****** Start Button
****** Stop Button
****** Parameter modification
****** Button presses

*** My history ( Last ten years )

    1. +   HF Original order router (2004). Not all events
    2. -   HF Trading system with a SQL database - regression
    3. --  IB Not even remotely possible
    4. ++  HF Still not full sourcing but close
    5. --  IB Not event remotely *thinkable*
    6. +++ HF Full event sourcing
*** Benefits
**** Functional abstraction
     ( State(n+1), Out(n) ) = f( State(n), Innovation(n) )

     (S1,O1) = f( S0 ,E0 )
     (S2,O2) = f( S1 ,E1 )
             = f( f(S0,E0),E1)
     Output o = state.onEvent( evt );

***** Consequences
****** Pure ( to all intents and purposes)
****** Determinism
****** Resilience
******** Replicate state to another box
****** Realtime separation of concerns (CQRS)
******* Command Layer
******** Trading
******* Query Layer
******** Can be parallelised across boxes/cluster
******** Allows 'stop the world' calculations
********* (Within reason) can't perform five minute calculation every second
******** Examples
********* State machine - statistics
********* GUIs / monitoring
********* Event Monitor
********* Replication
****** Audit
******** User actions
******** Historic replay
****** Testing
******** Reproducability
******** Regressions
****** Debugging
******** Conditional breakpoints on problematic events
*** Disadvantages
**** Nonstandard approach - push back from devs
**** Required disciplined approach
*** Realisable with modern SHM techniques
**** Acknowledgements
***** Martin Thompson
***** Peter Lawrey

**** Infinite queue
**** SPSC queue with ledger for recovery
**** MPSC queue with ledger for recovery
*** Why not Paxos/RAFT
**** Unable to easily migrate the apps from one box to the other


* Overview of architecture

** Multi layered
**** Separation of concerns

**** Concurrency + Persistence handled by outside of the framework

**** Layers
***** Inner layer
****** Single threaded
****** Normal code reacting to callbacks
****** Concerns
******* Orders/Executions
******* Profit / loss
******* Stats
******* Calculations
***** Event processing at outer layer.
****** Handles
******* Concurrency
******* Persistence
******* Event delivery to inner layer
****** Streams
******** Each writer has single writer - single writer principle
******** Wait free
******* Individual queues
******** Inbound
********* Market Data
********* Executions
********* Command control
******** Outbound
********* Trading
********* Concensus
********** Sparse queue - only works well for this general case
****** Event Loops
******* Control dispatch of events from streams
******** Live
******** Simulation
* D Advantages
** No interface/implementation split
** C linkage

